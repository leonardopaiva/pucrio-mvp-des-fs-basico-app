/* 
	MVP - PUCRS
*/
// In this MVP, a structure based on the "Singleton Design Pattern" was used. 
// https://github.com/simplesingleton/SSP-simple-singleton-pattern 
// "initAllModules", is responsible for starting all the App modules that are registered using the singleton.
// SSP should be considered a design pattern, the only function I used was a modified version by me
// "initAllModules" . I say this because the project has a requirement not to use libs and SSP should not be considered a lib
// instead is an idea of ​​structuring the project

// Examples, when called 'App.init()', every init function of each module is called, App.Doctor.init(), App.Event.init(), 
// so it is possible to apply something similar to the life cycle hooks that Angular or React have, 
// for example, ngOnInit, ngOnDestroy for Angular or the constructor, componentWillUnmount for React.

// I learned this concept in college with Professor Dennis Calazans (Marista College, Internet System), 
// and I would like to leave this comment as a "thank you" to him. Based on this concept, I also created some interesting things in this app, 
// functions like App.Doctor.routeInto(), App.Doctor.render(), App.Doctor.routeOut(), App.Routes.handleRouteChange(), and some 
// other functions. This is because I wanted to make the App experience similar to what I do with Angular or React, and I had 
// this challenge about how it would be to do this in this MVP that requires using only JavaScript, without including any libs.

// Googleapis was used in this project, but no other libs were used. Googleapis was used because it is necessary to visualize the queries on a map.
// for the map to work an api key needs to be passed in the script call in index.html
// <script src="https://maps.googleapis.com/maps/api/js?callback=initGoogleMaps&key=YOUR_API_KEY=places" async defer></script>
// This API KEY will be provided to teachers along with the GitHub links with the delivery of the MVP on the PUCRS platform
// However, it can also be generated by the Google Cloud Console https://cloud.google.com/cloud-console

// The api base url is:
// this._API_BASE_URL = 'http://127.0.0.1:5000'; 
// if your api url is diferente go to configs.js and change it.

// This is the first MVP of the Full Stack Development Postgraduate Program, at PUCRS University, Rio de Janeiro. 
// Student: Leonardo Souza Paiva, portfólio: www.leonardopaiva.com

/* 
	AppController
	controlls all app
	singleton based "var App = App || new AppController();"
	called by index.html > "App.init();"
*/
class AppController {
    constructor() {
		this._activeModule = null;
		this._previousModule = null;
		this._container = null;
	}

	/* main initializer */
	/* this is the first function called */
	/* called in index.html 'App.init()' */
	init() {
		this.initAllModules();
	}

	/* initialize all modules registered in App, example App.Doctor */
	/* the "registration" is something like "App.DoctorModule = new DoctorModule();" done inside every module file doctor.module.js */
	/* will run through all modules and call the init function if found (this[ChildModule].init)*/
	initAllModules() {
		for (var ChildModule in this) {
			if	(
				this[ChildModule] &&
				this[ChildModule].init &&
				(typeof this[ChildModule].init === 'function') &&
				(this[ChildModule]._autoInit || typeof(this[ChildModule]._autoInit) === 'undefined')
			) {
				this[ChildModule].init();
			}
		}
	}

	/* changes #main-content html content */
	/* called by routes.controller.js handleRouteChange function */
	/* Variables: 
		module: string > example 'DoctorModule'
		view: optional: string > example 'Create' or 'Map' this will swap the content inside event.module.js
	*/
	routeTo({module, view}) {
		if (!this[module]) return console.log(`module ${module} not found!`);
		
		//route out active module
		if (typeof(this[module].routeOut) !== 'undefined' && this._activeModule) 
			this._activeModule.routeOut();
		this._previousModule = this._activeModule;

		//route into new active module
		if (typeof(this[module].routeInto) === 'undefined') 
			return console.log('routeInto function not found!');
		
		this[module]._activeView = view;
		this[module].routeInto();
		this._activeModule = this[module];
	}

	/* will render content from module */
	/* 
		Variables:
		content: string > example `<div><h2>Doctors</h2><p>...</p></div>` 
	*/
	/* called from modules 'routeInto' function example, App.DoctorModule.routeInto() */
	render(content) {
		this._container = this._container || document.getElementById("main-content");

		if (!this._container) return console.log('#main-content not found!');
		this._container.innerHTML = content;
	}
}

var App = App || new AppController();
